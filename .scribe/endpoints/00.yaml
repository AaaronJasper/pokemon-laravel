name: Endpoints
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/pokemon
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Search all Pokemons'
      description: |-
        Retrieve a list of all Pokémons. Authentication is optional – if a valid token is provided,
        the response will also indicate whether the current user has liked each Pokémon.
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} optional Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "code": 201,
            "data": {
              "data": [
                {
                  "id": 5,
                  "name": "pepe99",
                  "level": "1",
                  "race": "wugtrio",
                  "nature": "creative",
                  "ability": "versatile",
                  "skill1": "slam",
                  "skill2": "sand-attack",
                  "skill3": "headbutt",
                  "skill4": "wrap",
                  "created_at": "2023-09-20 09:24:18",
                  "updated_at": "2023-09-20 09:24:18",
                  "image_url": "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/961.png",
                  "is_liked": false
                },
                {
                  "id": 6,
                  "name": "pepe100",
                  "level": "2",
                  "race": "wugtrio",
                  "nature": "creative",
                  "ability": "versatile",
                  "skill1": "slam",
                  "skill2": "sand-attack",
                  "skill3": "headbutt",
                  "skill4": "wrap",
                  "created_at": "2023-09-21 10:00:00",
                  "updated_at": "2023-09-21 10:00:00",
                  "image_url": "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/961.png",
                  "is_liked": false
                }
              ]
            },
            "message": "Created successfully"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/pokemon
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Store a Pokemon'
      description: 'Save a new Pokémon to the database with its attributes and initial skills.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Must be at least 1 character. Max 8 characters.'
        required: true
        example: pepe99
        type: string
        enumValues: []
        custom: []
      level:
        name: level
        description: 'Min: 1, Max: 100.'
        required: true
        example: 1
        type: integer
        enumValues: []
        custom: []
      ability:
        name: ability
        description: 'The name of the ability required'
        required: false
        example: creative
        type: string
        enumValues: []
        custom: []
      nature:
        name: nature
        description: 'The name of the nature required'
        required: false
        example: verstaile
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      name: pepe99
      level: 1
      ability: creative
      nature: verstaile
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "code": 201,
          "data": {
              "id": 5,
              "name": "pepe99",
              "level": "1",
              "race": "wugtrio",
              "nature": "creative",
              "ability": "versatile",
              "skill1": null,
              "skill2": null,
              "skill3": null,
              "skill4": null,
              "created_at": "2023-09-20 09:24:18",
              "updated_at": "2023-09-20 09:24:18",
              "image_url": "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/961.png",
              "is_liked": false
          },
          "message": "Created successfully"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/pokemon/{id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Search a Pokemon'
      description: 'Retrieve detailed information about a specific Pokémon by its ID, including skills, stats, and like status.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the Pokemon.'
        required: true
        example: 5
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 5
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "code": 200,
          "data": {
              "id": 5,
              "name": "pepe99",
              "level": "11",
              "race": "wugtrio",
              "nature": "creative",
              "ability": "paitent",
              "skill1": "slam",
              "skill2": "sand-attack",
              "skill3": "headbutt",
              "skill4": "wrap",
              "created_at": "2023-09-20 09:24:18",
              "updated_at": "2023-09-20 09:24:18",
              "image_url": "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/961.png",
              "is_liked": false
          },
          "message": "search successfully"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/pokemon/{id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update a Pokemon'
      description: 'Update the attributes of an existing Pokémon. Authentication is required.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters:
      id:
        name: id
        description: 'The ID of the Pokemon.'
        required: true
        example: 5
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 5
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Must be at least 1 character. Max 8 characters.'
        required: false
        example: pepe99
        type: string
        enumValues: []
        custom: []
      level:
        name: level
        description: 'Min: 1, Max: 100.'
        required: false
        example: 5
        type: integer
        enumValues: []
        custom: []
      ability:
        name: ability
        description: 'The name of the ability'
        required: false
        example: creative
        type: string
        enumValues: []
        custom: []
      nature:
        name: nature
        description: 'The name of the nature'
        required: false
        example: versatile
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      name: pepe99
      level: 5
      ability: creative
      nature: versatile
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "code": 200,
          "data": {
              "id": 5,
              "name": "pepe99",
              "level": "11",
              "race": "wugtrio",
              "nature": "creative",
              "ability": "paitent",
              "skill1": "slam",
              "skill2": "sand-attack",
              "skill3": "headbutt",
              "skill4": "wrap",
              "created_at": "2023-09-20 09:24:18",
              "updated_at": "2023-09-20 09:24:18",
              "image_url": "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/961.png",
              "is_liked": false
          },
          "message": "Update completed"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/pokemon/{id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a Pokemon'
      description: 'Remove a Pokémon from the system. Authentication is required.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters:
      id:
        name: id
        description: 'The ID of the Pokemon.'
        required: true
        example: 5
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 5
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "code": 200,
          "data": [],
          "message": "successfully deleted"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/nature
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a nature'
      description: 'Allows an authenticated user to create a new nature for Pokémon.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      nature:
        name: nature
        description: ''
        required: true
        example: creative
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      nature: creative
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "code": 201,
          "data": {
              "name": "creative",
              "updated_at": "2023-09-20T09:46:22.000000Z",
              "created_at": "2023-09-20T09:46:22.000000Z",
              "id": 28
          },
          "message": "Created successfully"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/nature/{id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update a nature'
      description: 'Allows an authenticated user to update the name of an existing Pokémon nature.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters:
      id:
        name: id
        description: 'The ID of the nature.'
        required: true
        example: 1
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      nature:
        name: nature
        description: ''
        required: true
        example: creative
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      nature: creative
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "code": 200,
          "data": {
              "id": 28,
              "name": "creative",
              "created_at": "2023-09-20T09:46:22.000000Z",
              "updated_at": "2023-09-20T09:47:23.000000Z"
          },
          "message": "Updated successfully"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/ability
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create an ability'
      description: 'Allows an authenticated user to create a new ability for Pokémon.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      ability:
        name: ability
        description: ''
        required: true
        example: creative
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      ability: creative
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "code": 201,
          "data": {
              "name": "patient",
              "updated_at": "2023-09-20T09:43:34.000000Z",
              "created_at": "2023-09-20T09:43:34.000000Z",
              "id": 270
          },
          "message": "Created successfully"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/ability/{id}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update an ability'
      description: 'Allows an authenticated user to update the name of an existing Pokémon ability.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters:
      id:
        name: id
        description: 'The ID of the ability.'
        required: true
        example: 1
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      ability:
        name: ability
        description: ''
        required: true
        example: patient
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      ability: patient
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "code": 200,
          "data": {
              "id": 270,
              "name": "patient",
              "created_at": "2023-09-20T09:43:34.000000Z",
              "updated_at": "2023-09-20T09:45:19.000000Z"
          },
          "message": "Updated successfully"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/pokemon/{id}/enableSkill'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Show learnable skills'
      description: 'Display all the skills that the given Pokemon can learn.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters:
      id:
        name: id
        description: 'The ID of the Pokemon.'
        required: true
        example: 132
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 132
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          [
            "slam",
            "sand-attack",
            "headbutt",
            "wrap",
            "take-down",
            "water-gun",
            "hydro-pump",
            "surf",
            "ice-beam",
            "blizzard",
            "hyper-beam",
            "dig",
            "agility",
            "swift",
            "rest",
            "substitute",
            "protect",
            "mud-slap",
            "sandstorm",
            "endure",
            "sleep-talk",
            "pain-split",
            "rain-dance",
            "whirlpool",
            "facade",
            "helping-hand",
            "muddy-water",
            "mud-shot",
            "water-pulse",
            "sucker-punch",
            "earth-power",
            "giga-impact",
            "aqua-jet",
            "foul-play",
            "bulldoze",
            "throat-chop",
            "stomping-tantrum",
            "liquidation",
            "tera-blast",
            "triple-dive",
            "chilling-water"
          ]
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/pokemon/{id}/skill'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Show learned skills'
      description: 'Display the list of skills that a given Pokemon has learned.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters:
      id:
        name: id
        description: 'The ID of the Pokemon.'
        required: true
        example: 132
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 132
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "code": 200,
            "data": {
              "skill1": "slam",
              "skill2": "sand-attack",
              "skill3": "headbutt",
              "skill4": "wrap"
            },
            "message": "Search successful"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/pokemon/{id}/skill'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Learn skills'
      description: |-
        Allows an authenticated user to update the skills of a specific Pokémon.
        Skills are optional; only provide the ones you want to update.
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters:
      id:
        name: id
        description: 'The ID of the Pokemon.'
        required: true
        example: 2
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      skill1:
        name: skill1
        description: optional
        required: false
        example: transform
        type: string
        enumValues: []
        custom: []
      skill2:
        name: skill2
        description: optional
        required: false
        example: 'null'
        type: string
        enumValues: []
        custom: []
      skill3:
        name: skill3
        description: optional
        required: false
        example: 'null'
        type: string
        enumValues: []
        custom: []
      skill4:
        name: skill4
        description: optional
        required: false
        example: 'null'
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      skill1: transform
      skill2: 'null'
      skill3: 'null'
      skill4: 'null'
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "code": 201,
          "data": {
              "id": 2,
              "name": "pepe2",
              "level": 6,
              "race": "ditto",
              "nature": "creative",
              "ability": "patient",
              "skill1": "transform",
              "skill2": null,
              "skill3": null,
              "skill4": null,
              "created_at": "2023-09-17 11:06:10",
              "updated_at": "2023-09-17 11:15:02"
          },
          "message": "Updated successfully"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/trade
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Initiate a trade'
      description: |-
        Allows an authenticated user to propose a trade between two Pokémon.
        The trade status will initially be "pending" until accepted or rejected by the receiver.
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      sender_pokemon_id:
        name: sender_pokemon_id
        description: ''
        required: true
        example: 2
        type: integer
        enumValues: []
        custom: []
      receiver_pokemon_id:
        name: receiver_pokemon_id
        description: ''
        required: true
        example: 112
        type: integer
        enumValues: []
        custom: []
    cleanBodyParameters:
      sender_pokemon_id: 2
      receiver_pokemon_id: 112
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "code": 201,
          "data": {
              "sender_id": 4,
              "receiver_id": 1,
              "sender_pokemon_id": 2,
              "receiver_pokemon_id": 112,
              "status": "pending",
              "updated_at": "2025-06-13T06:19:51.000000Z",
              "created_at": "2025-06-13T06:19:51.000000Z",
              "id": 16
          },
          "message": "Initiate trade successfully"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/trade
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Show a trade'
      description: |-
        Retrieves the pending Pokémon trade for the currently authenticated user, if any.
        Includes sender, receiver, Pokémon involved, and trade status.
        Requires authentication.
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "code": 200,
            "data": {
                "id": 24,
                "sender_id": 5,
                "receiver_id": 4,
                "sender_pokemon_id": 127,
                "receiver_pokemon_id": 122,
                "status": "pending",
                "created_at": "2025-06-14T06:23:54.000000Z",
                "updated_at": "2025-06-14T06:23:54.000000Z"
            },
            "message": ""
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/trade/{id}/accept'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Accept a trade'
      description: |-
        Accepts a pending Pokémon trade by the authenticated user.
        Updates the trade status to "accepted" and finalizes the exchange of Pokémon.
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters:
      id:
        name: id
        description: 'The ID of the Trade.'
        required: true
        example: 24
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 24
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "code": 200,
            "data": {
                "id": 24,
                "sender_id": 5,
                "receiver_id": 4,
                "sender_pokemon_id": 127,
                "receiver_pokemon_id": 122,
                "status": "accepted",
                "created_at": "2025-06-14T06:23:54.000000Z",
                "updated_at": "2025-06-14T06:25:46.000000Z",
            },
            "message": "Trade accepted successfully"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/trade/{id}/reject'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Reject a trade'
      description: |-
        Rejects a pending Pokémon trade by the authenticated user.
        Updates the trade status to "rejected" and notifies the sender.
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters:
      id:
        name: id
        description: 'The ID of the Trade.'
        required: true
        example: 24
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      id: 24
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "code": 200,
            "data": {
                "id": 4,
                "sender_id": 1,
                "receiver_id": 4,
                "sender_pokemon_id": 2,
                "receiver_pokemon_id": 112,
                "status": "rejected",
                "created_at": "2025-06-10T06:55:25.000000Z",
                "updated_at": "2025-06-10T06:56:43.000000Z"
            },
            "message": "Trade rejected successfully"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/trade/history
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Show all accepted trades'
      description: |-
        Retrieves a list of all accepted Pokémon trades involving the authenticated user,
        including details of the sender and receiver Pokémon.
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
              "code": 200,
              "data": [
                  {
                      "id": 8,
                      "sender_id": 1,
                      "receiver_id": 4,
                      "sender_pokemon_id": 98,
                      "receiver_pokemon_id": 124,
                      "status": "accepted",
                      "created_at": "2025-06-12T11:01:37.000000Z",
                      "updated_at": "2025-06-12T11:05:12.000000Z",
                      "sender_pokemon": {
                          "id": 98,
                          "name": "Gengar no.98",
                          "level": 50,
                          "race": "gengar",
                          "nature_id": 1,
                          "ability_id": 1,
                          "status": 1,
                          "created_at": "2025-05-26T07:51:56.000000Z",
                          "updated_at": "2025-06-12T11:05:12.000000Z",
                          "skill1": "mega-punch",
                          "skill2": null,
                          "skill3": null,
                          "skill4": null,
                          "user_id": 4,
                          "image_url": "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/94.png",
                          "is_trading": 0
                      },
                      "receiver_pokemon": {
                          "id": 124,
                          "name": "garchomp",
                          "level": 77,
                          "race": "garchomp",
                          "nature_id": 26,
                          "ability_id": 267,
                          "status": 1,
                          "created_at": "2025-06-06T12:49:00.000000Z",
                          "updated_at": "2025-06-12T11:05:12.000000Z",
                          "skill1": null,
                          "skill2": null,
                          "skill3": null,
                          "skill4": null,
                          "user_id": 1,
                          "image_url": "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/445.png",
                          "is_trading": 0
                      }
                  }
              ],
              "message": "Successfully retrieved 1 accepted trades."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/trade/unread-notifications
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Response when a trade is accepted and the user is the sender'
      description: |-
        Retrieves unread notifications related to trades for the authenticated user,
        including the user's role (sender or receiver) and trade details.
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "code": 200,
            "data": {
              "has_unread": true,
              "role": "sender",
              "trade_id": 152,
              "trade": {
                "id": 152,
                "sender_id": 4,
                "receiver_id": 5,
                "sender_pokemon_id": 121,
                "receiver_pokemon_id": 131,
                "status": "accepted",
                "created_at": "2025-07-26T05:07:14.000000Z",
                "updated_at": "2025-07-26T05:07:33.000000Z",
                "sender_is_read": 1,
                "receiver_is_read": 0
              },
              "status": "accepted"
            },
            "message": ""
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/trade/{trade_id}/mark-as-read'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Response when a trade notification is successfully marked as read.'
      description: |-
        Marks the trade notification as read for the authenticated user, depending on whether
        the user is the sender or receiver.
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters:
      trade_id:
        name: trade_id
        description: 'The ID of the trade.'
        required: true
        example: 16
        type: integer
        enumValues: []
        custom: []
    cleanUrlParameters:
      trade_id: 16
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
           "code": 200,
           "data": "",
           "message": "Marked as read",
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/like
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Like a Pokemon'
      description: 'Mark a Pokemon as liked by the authenticated user.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} required The access token of the authenticated user. Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      pokemon_id:
        name: pokemon_id
        description: 'The ID of the Pokemon.'
        required: true
        example: 132
        type: integer
        enumValues: []
        custom: []
    cleanBodyParameters:
      pokemon_id: 132
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "code": 201,
            "data": [],
            "message": "Liked successfully"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/unlike
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Unlike a Pokemon'
      description: 'Remove a like from a Pokemon for the authenticated user.'
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} required The access token of the authenticated user. Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      pokemon_id:
        name: pokemon_id
        description: 'The ID of the Pokemon to unlike.'
        required: true
        example: 132
        type: integer
        enumValues: []
        custom: []
    cleanBodyParameters:
      pokemon_id: 132
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "code": 200,
            "data": [],
            "message": "Unliked successfully"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/ranking/top-liked
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get top liked Pokémon'
      description: 'Retrieve the top 7 Pokémon that have been liked by users.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "code": 200,
            "data": [
              {
                "id": 132,
                "name": "wugtrio",
                "level": 99,
                "race": "wugtrio",
                "nature_id": 26,
                "ability_id": 267,
                "status": 1,
                "created_at": "2025-06-11T06:32:48.000000Z",
                "updated_at": "2025-08-18T08:23:44.000000Z",
                "skill1": "slam",
                "skill2": "sand-attack",
                "skill3": "headbutt",
                "skill4": "wrap",
                "user_id": 1,
                "image_url": "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/961.png",
                "is_trading": 0,
                "liked_by_users_count": 3,
                "user": {
                  "id": 1,
                  "name": "default",
                  "email": "default@default.com",
                  "email_verified_at": null,
                  "two_factor_confirmed_at": null,
                  "current_team_id": null,
                  "profile_photo_path": null,
                  "created_at": "2025-05-26T07:51:56.000000Z",
                  "updated_at": "2025-05-26T07:51:56.000000Z",
                  "google_account": null
                }
              },
              {
                "id": 131,
                "name": "rayquaza",
                "level": 6,
                "race": "rayquaza",
                "nature_id": 26,
                "ability_id": 267,
                "status": 1,
                "created_at": "2025-06-10T05:31:46.000000Z",
                "updated_at": "2025-07-26T05:19:08.000000Z",
                "skill1": null,
                "skill2": null,
                "skill3": null,
                "skill4": null,
                "user_id": 4,
                "image_url": "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/384.png",
                "is_trading": 0,
                "liked_by_users_count": 3,
                "user": {
                  "id": 4,
                  "name": "aaaa",
                  "email": "a@a.com",
                  "email_verified_at": null,
                  "two_factor_confirmed_at": null,
                  "current_team_id": null,
                  "profile_photo_path": null,
                  "created_at": "2025-06-04T06:00:41.000000Z",
                  "updated_at": "2025-06-04T06:00:41.000000Z",
                  "google_account": null
                }
              }
            ],
            "message": "Top liked Pokémon fetched successfully"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/pokemon/describe
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Generate Pokemon description'
      description: 'Generate a detailed description for a Pokémon based on its ID, including its level, ability, nature, and moves.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      pokemon_id:
        name: pokemon_id
        description: 'The ID of the Pokemon.'
        required: true
        example: 132
        type: integer
        enumValues: []
        custom: []
    cleanBodyParameters:
      pokemon_id: 132
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "code": 200,
            "data": {
              "headers": {},
              "original": {
                "description": "Wugtrio is a high-level Pokémon species known for its distinctive traits and abilities. Currently at level 99, Wugtrio possesses the unique ability named \"Patient,\" which reflects its strategic nature and allows it to outlast opponents in battles. This Pokémon exhibits a creative nature, often utilizing unconventional methods to tackle challenges and opponents alike.\n\nWugtrio has mastered a versatile array of moves, including Slam, Sand-Attack, Headbutt, and Wrap, each contributing to its adaptability and strength in combat. These skills highlight Wugtrio's capability to both deliver powerful attacks and employ strategic defensive maneuvers. Its combination of high-level experience and diverse move set make it a formidable opponent in various battle scenarios. Known for its resilience and ingenuity, Wugtrio exemplifies strategic depth, making it a valuable asset for trainers seeking a versatile and resilient partner."
              },
              "exception": null
            },
            "message": "Generate successfully"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/register
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Register a new user'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Must be at least 1 character and at most 16 characters.'
        required: true
        example: zzzz
        type: string
        enumValues: []
        custom: []
      email:
        name: email
        description: 'Must be a valid email and unique.'
        required: true
        example: z@z.com
        type: string
        enumValues: []
        custom: []
      password:
        name: password
        description: 'Must be at least 4 characters and at most 16 characters.'
        required: true
        example: zzzz
        type: string
        enumValues: []
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Must match the password.'
        required: true
        example: zzzz
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      name: zzzz
      email: z@z.com
      password: zzzz
      password_confirmation: zzzz
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "code": 201,
            "data": {
              "id": 191,
              "user": "zzzz",
              "token": "196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC"
            },
            "message": "Register success"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/user/login
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: Login
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'Must be a valid email of an existing user.'
        required: true
        example: z@z.com
        type: string
        enumValues: []
        custom: []
      password:
        name: password
        description: 'Must be at least 4 characters and at most 16 characters.'
        required: true
        example: zzzz
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      email: z@z.com
      password: zzzz
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "code": 200,
            "data": {
              "id": 191,
              "user": "pepe99",
              "token": "197|9gZJvthvy25irafpoaANdyOJYkugFeAB6yZTUgU4",
              "isVerify": false
            },
            "message": "Login success"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/oauth/exchange-token
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Exchange code for API token'
      description: 'This endpoint allows a client to exchange a temporary OAuth code for a personal access token.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      code:
        name: code
        description: 'The temporary OAuth code received from the authentication flow.'
        required: true
        example: abc123
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      code: abc123
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "code": 200,
            "data": {
              "id": 191,
              "user": "pepe99",
              "token": "196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC",
              "isVerify": false
            },
            "message": "Login success"
          }
        headers: []
        description: ''
        custom: []
      -
        status: 400
        content: |-
          {
            "message": "Invalid or expired code"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: api/user/logout
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: Logout
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "code": 200,
          "data": {
              "name": "zzzz",
              "email": "z@z.com"
          },
          "message": "Logout success"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/send_verify
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Resend verification email'
      description: ''
      authenticated: true
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      Authorization: 'Bearer {token} Example: Bearer 196|wQr6eQ7dvE2cjGyztjIWJeGqCWa0GhVSON2Z7EcC'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "code": 200,
          "data": {
              "name": "rick",
              "email": "b@b.com"
          },
          "message": "Email send successfully"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/verify/{token}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Execute verification'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      token:
        name: token
        description: ''
        required: true
        example: maxime
        type: string
        enumValues: []
        custom: []
    cleanUrlParameters:
      token: maxime
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "code": 200,
          "data": [],
          "message": "Verify success"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/forget_password
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Send password reset email'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'Must be a valid email address.'
        required: true
        example: carleton.moen@example.com
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      email: carleton.moen@example.com
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "code": 200,
          "data": [],
          "message": "Email send successfully"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/reset_password/{token}'
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Reset password'
      description: 'This endpoint allows a user to reset their password using a valid reset token.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      token:
        name: token
        description: "The password reset token sent to the user's email."
        required: true
        example: abc123token
        type: string
        enumValues: []
        custom: []
    cleanUrlParameters:
      token: abc123token
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The email of the user. Must exist in the system.'
        required: true
        example: pepe99@example.com
        type: string
        enumValues: []
        custom: []
      password:
        name: password
        description: 'The new password. Must be 4-16 characters and match password_confirmation.'
        required: true
        example: newpass123
        type: string
        enumValues: []
        custom: []
      password_confirmation:
        name: password_confirmation
        description: 'Must match the password.'
        required: true
        example: newpass123
        type: string
        enumValues: []
        custom: []
      token:
        name: token
        description: ''
        required: true
        example: veniam
        type: string
        enumValues: []
        custom: []
    cleanBodyParameters:
      email: pepe99@example.com
      password: newpass123
      password_confirmation: newpass123
      token: veniam
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "code": 200,
            "data": [],
            "message": "Update password success"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/auth/google/callback
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Google login callback'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "code": 200,
          "data": "2|JgAcW87DjmPYIX2uyFhdATblRGWYnqODmEGLGe5q",
          "message": "Login success"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/notLogin
    metadata:
      groupName: Endpoints
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Unauthenticated (handled by middleware redirect)'
      description: ''
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
          "code": 401,
          "data": [],
          "message": "Not logged in"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
